# The following two commands remove any previously installed H2O packages for R.#
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }#
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }#
#
# Next, we download packages that H2O depends on.#
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }#
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }#
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }#
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }#
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }#
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }#
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }#
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }#
#
# Now we download, install and initialize the H2O package for R.#
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))#
library(h2o)#
localH2O = h2o.init(nthreads=-1)#
#
# Finally, let's run a demo to see H2O at work.#
demo(h2o.kmeans)
h2o.init()
library(h2o)#
localH2O = h2o.init(nthreads=-1)
visco_train = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")#
visco_test = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_test.txt")#
visco_valid = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_valid.txt")#
#
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train, #
	validation_frame = visco_valid, #
	activation = c("Tanh"), #
	hidden = c(12,8,15),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))#
#to get weights and biases:#
weights1 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=1)$name))#
weights2 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=2)$name))#
weights3 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=3)$name))#
weights4 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=4)$name)) #
#
biases1 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=1)$name))#
biases2 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=2)$name))#
biases3 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=3)$name))#
biases4 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=4)$name))#
#
write.table(weights1,'weights1.txt',sep = "\t")#
write.table(weights2,'weights2.txt',sep = "\t")#
write.table(weights3,'weights3.txt',sep = "\t")#
write.table(weights3,'weights4.txt',sep = "\t")#
#
write.table(biases1,'biases1.txt',sep = "\t")#
write.table(biases2,'biases2.txt',sep = "\t")#
write.table(biases3,'biases3.txt',sep = "\t")#
write.table(biases3,'biases4.txt',sep = "\t")
visco_train = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")#
visco_test = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_test.txt")#
visco_valid = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_valid.txt")
exit
setwd("/Users/charles/Dropbox/NeuralNetwork/Viscosity/H2O")#
library("h2o")#
localH2O = h2o.init()#
#
visco_train = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")#
visco_test = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_test.txt")#
visco_valid = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_valid.txt")#
#
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train, #
	validation_frame = visco_valid, #
	activation = c("Tanh"), #
	hidden = c(12,8,15),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))#
#to get weights and biases:#
weights1 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=1)$name))#
weights2 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=2)$name))#
weights3 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=3)$name))#
weights4 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=4)$name)) #
#
biases1 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=1)$name))#
biases2 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=2)$name))#
biases3 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=3)$name))#
biases4 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=4)$name))#
#
write.table(weights1,'weights1.txt',sep = "\t")#
write.table(weights2,'weights2.txt',sep = "\t")#
write.table(weights3,'weights3.txt',sep = "\t")#
write.table(weights3,'weights4.txt',sep = "\t")#
#
write.table(biases1,'biases1.txt',sep = "\t")#
write.table(biases2,'biases2.txt',sep = "\t")#
write.table(biases3,'biases3.txt',sep = "\t")#
write.table(biases3,'biases4.txt',sep = "\t")
setwd("/Users/charles/Dropbox/NeuralNetwork/Viscosity/H2O")
library("h2o")#
localH2O = h2o.init()
visco_train = h2o.importFile(localH2O, path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")
visco_train = h2o.importFile(path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")
visco_train = h2o.importFile(path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_train.txt")#
visco_test = h2o.importFile(path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_test.txt")#
visco_valid = h2o.importFile(path = "/Users/charles/Dropbox/NeuralNetwork/Viscosity/data/H2O_valid.txt")
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train, #
	validation_frame = visco_valid, #
	activation = c("Tanh"), #
	hidden = c(12,8,15),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))#
#to get weights and biases:#
weights1 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=1)$name))#
weights2 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=2)$name))#
weights3 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=3)$name))#
weights4 <- as.data.frame(h2o.getFrame(h2o.weights(best_model,matrix_id=4)$name)) #
#
biases1 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=1)$name))#
biases2 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=2)$name))#
biases3 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=3)$name))#
biases4 <- as.data.frame(h2o.getFrame(h2o.biases(best_model,vector_id=4)$name))#
#
write.table(weights1,'weights1.txt',sep = "\t")#
write.table(weights2,'weights2.txt',sep = "\t")#
write.table(weights3,'weights3.txt',sep = "\t")#
write.table(weights3,'weights4.txt',sep = "\t")#
#
write.table(biases1,'biases1.txt',sep = "\t")#
write.table(biases2,'biases2.txt',sep = "\t")#
write.table(biases3,'biases3.txt',sep = "\t")#
write.table(biases3,'biases4.txt',sep = "\t")
mse
mse_valid
mse_test
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	overwrite_with_best_model, #
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(8,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	overwrite_with_best_model=TRUE, #
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(8,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(8,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0002, #
	#l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)
h2o.weights()
h2o.weights(best_model)
h2o.weights(model)
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))\
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
mse
mse_valid
mse_test
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(8,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
mse
mse_valid
mse_test
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(15,15,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
mse
mse_valid
mse_test
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(12,6,3),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
mse
mse_test
mse_train
mse_valid
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Tanh"), #
	hidden = c(12,6,4),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))#
#
]
mse
mse_valid
mse_train
mse_test
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifiers"), #
	hidden = c(15,10,5),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
model <- h2o.deeplearning(x = 1:15, y = 16, #
	training_frame = visco_train,#
	validation_frame = visco_valid, #
	activation = c("Rectifier"), #
	hidden = c(15,10,5),#
	autoencoder = F,#
	#input_dropout_ratio = .1,#
	#hidden_dropout_ratios = .1,#
	epochs = 3000, #
	variable_importances = T,#
	use_all_factor_levels = T,#
	train_samples_per_iteration = -2,#
	adaptive_rate = T,#
	l1 = 0.0001, #
	l2 = 0.002, #
	shuffle_training_data = T, #
	reproducible = T,#
	loss = "Automatic",#
	score_interval = 5,#
	score_training_samples = 10000,#
	score_validation_samples = 0,#
	score_duty_cycle = 0.1,#
	overwrite_with_best_model = T,#
	#seed = 7979706519224486000,#
	rho = 0.995,#
	epsilon = 1e-8,#
	initial_weight_distribution = "UniformAdaptive",#
	regression_stop  = 0.000001, #
	diagnostics = T,#
	fast_mode = F,#
	force_load_balance = T,#
	single_node_mode = F,#
	quiet_mode = F,#
	sparse = F,#
	col_major = F,#
	average_activation = 0,#
	sparsity_beta = 0,#
	export_weights_and_biases = TRUE)#
ypred_h2o <- h2o.predict(model, visco_train)#
ypred <- as.data.frame(ypred_h2o)#
#
yvalid_h2o <- h2o.predict(model, visco_valid)#
yvalid <- as.data.frame(yvalid_h2o)#
#
ytest_h2o <- h2o.predict(model, visco_test)#
ytest <- as.data.frame(ytest_h2o)#
#
ytrain_plot = as.data.frame(visco_train)[16]#
ytest_plot = as.data.frame(visco_test)[16]#
yvalid_plot = as.data.frame(visco_valid)[16]#
#
#attach(mtcars)#
par(mfrow=c(2,2))#
plot(ytrain_plot[,],ypred[,])#
plot(yvalid_plot[,],yvalid[,])#
plot(ytest_plot[,],ytest[,])#
#
mse <- sqrt(1/length(ypred[,])*sum((ypred[,]-as.data.frame(visco_train)[16])^2))#
mse_valid <- sqrt(1/length(yvalid[,])*sum((yvalid[,]-as.data.frame(visco_valid)[16])^2))#
mse_test <- sqrt(1/length(ytest[,])*sum((ytest[,]-as.data.frame(visco_test)[16])^2))
mse
mse_valid
mse_test
