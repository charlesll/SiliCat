// Licensed under the Apache License, Version 2.0
// http://www.apache.org/licenses/LICENSE-2.0.html
//
// AUTOGENERATED BY H2O at 2015-07-17T18:51:03.032-04:00
// 3.0.0.25
//
// Standalone prediction code with sample test data for DeepLearningModel named deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9
//
// How to download, compile and execute:
//     mkdir tmpdir
//     cd tmpdir
//     curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
//     curl http://127.0.0.1:54321/3/Models.java/deeplearning-614ea374-1d93-48f8-b844-60a6eba734e9 > deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9.java
//     javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9.java
//
//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
import java.util.Map;
import hex.genmodel.GenModel;

public class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 12; }
  public int nclasses() { return 1; }
  // Workspace for storing numerical input variables.
  public static final double[] NUMS = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  // Standardization/Normalization scaling factor for numerical variables.
  public static final double[] NORMMUL = {0.06520247586799728,0.420717273390071,0.11690143144141675,0.12443718442865324,0.16169782490543583,0.0979527020196379,0.07101058753645466,0.11600576126822708,0.2824728265262689,11.436934158977778,0.2851175443348977,0.0023619702386696913};
  // Standardization/Normalization offset for numerical variables.
  public static final double[] NORMSUB = {61.97665315852091,0.43181883194278836,10.599351609058346,2.0106364719904652,0.8677759237187123,5.193017878426697,9.495323003575647,6.406564958283642,1.7202002383790127,0.01814541120381407,1.2872514898688951,1339.0913945173227};
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Standardization/Normalization scaling factor for response.
  public static final double[] NORMRESPMUL = {0.20767302867914086};
  // Standardization/Normalization offset for response.
  public static final double[] NORMRESPSUB = {6.397026460071502};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {12,12,4,1};
    // Storage for neuron activation values.
    public static final float[][] ACTIVATION = new float[][] {
      /* Input */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_0.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_1.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_2.VALUES,
      /* Linear */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final float[][] BIAS = new float[][] {
      /* Input */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_0.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_1.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_2.VALUES,
      /* Linear */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_0.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_1.VALUES,
      /* Tanh */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_2.VALUES,
      /* Linear */ deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* SiO2 */ null,
    /* TiO2 */ null,
    /* Al2O3 */ null,
    /* FeOt */ null,
    /* MnO */ null,
    /* MgO */ null,
    /* CaO */ null,
    /* Na2O */ null,
    /* K2O */ null,
    /* P2O5 */ null,
    /* H2O */ null,
    /* T (K) */ null,
    /* Visco Pa s */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2452578357024762864L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0f);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB[i])*NORMMUL[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0f : (float) NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0f);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      float[] x = ACTIVATION[i-1];
      float[] y = BIAS[i];
      float[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        float psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = 1f - 2f / (1f + (float)Math.exp(2*ACTIVATION[i][r]));
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = (ACTIVATION[i][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = (float)preds[1];
    return preds;
  }
}
// Neuron activation values for Input layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_0 implements java.io.Serializable {
  public static final float[] VALUES = new float[12];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_0_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_0_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0f;
      sa[1] = 0.0f;
      sa[2] = 0.0f;
      sa[3] = 0.0f;
      sa[4] = 0.0f;
      sa[5] = 0.0f;
      sa[6] = 0.0f;
      sa[7] = 0.0f;
      sa[8] = 0.0f;
      sa[9] = 0.0f;
      sa[10] = 0.0f;
      sa[11] = 0.0f;
    }
  }
}
// Neuron activation values for Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[12];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_1_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0f;
      sa[1] = 0.0f;
      sa[2] = 0.0f;
      sa[3] = 0.0f;
      sa[4] = 0.0f;
      sa[5] = 0.0f;
      sa[6] = 0.0f;
      sa[7] = 0.0f;
      sa[8] = 0.0f;
      sa[9] = 0.0f;
      sa[10] = 0.0f;
      sa[11] = 0.0f;
    }
  }
}
// Neuron activation values for Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[4];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_2_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0f;
      sa[1] = 0.0f;
      sa[2] = 0.0f;
      sa[3] = 0.0f;
    }
  }
}
// Neuron activation values for Linear layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[1];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_3_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Activation_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0f;
    }
  }
}
// Neuron bias values for Input layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron bias values for Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[12];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_1_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.17983659f;
      sa[1] = -0.0742441f;
      sa[2] = -0.46341845f;
      sa[3] = 0.16773601f;
      sa[4] = 1.0582735E-5f;
      sa[5] = -0.106633596f;
      sa[6] = -1.0210872f;
      sa[7] = -8.057441E-5f;
      sa[8] = 0.40172085f;
      sa[9] = -0.6086193f;
      sa[10] = -1.8754923E-5f;
      sa[11] = 0.30419004f;
    }
  }
}
// Neuron bias values for Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[4];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_2_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.24792027f;
      sa[1] = 1.4520716E-5f;
      sa[2] = 0.21958572f;
      sa[3] = -7.9315934E-5f;
    }
  }
}
// Neuron bias values for Linear layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[1];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_3_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Bias_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.47772628f;
    }
  }
}
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[144];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_1_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.0841024f;
      sa[1] = -0.108104624f;
      sa[2] = 0.38734466f;
      sa[3] = -0.17471094f;
      sa[4] = 0.0018303167f;
      sa[5] = -0.40945885f;
      sa[6] = -0.086806566f;
      sa[7] = -0.13692294f;
      sa[8] = -0.016063409f;
      sa[9] = 0.0055322307f;
      sa[10] = -0.123243205f;
      sa[11] = 0.5875717f;
      sa[12] = -0.0019400911f;
      sa[13] = 0.119015016f;
      sa[14] = 0.043140154f;
      sa[15] = 0.09223435f;
      sa[16] = 0.15910737f;
      sa[17] = 0.2050236f;
      sa[18] = 0.32853237f;
      sa[19] = 0.18501091f;
      sa[20] = 0.045645148f;
      sa[21] = -0.0027562412f;
      sa[22] = 0.0463793f;
      sa[23] = 0.9198281f;
      sa[24] = -0.15280816f;
      sa[25] = 0.027926251f;
      sa[26] = 0.33371153f;
      sa[27] = 0.10983543f;
      sa[28] = 0.09096736f;
      sa[29] = 0.08910981f;
      sa[30] = 0.022518307f;
      sa[31] = -0.27175778f;
      sa[32] = -0.12375479f;
      sa[33] = -0.0029454306f;
      sa[34] = 0.06498532f;
      sa[35] = 0.30460718f;
      sa[36] = 0.04814271f;
      sa[37] = 0.06322057f;
      sa[38] = 0.06284986f;
      sa[39] = 0.113394596f;
      sa[40] = 0.008147136f;
      sa[41] = 0.053404737f;
      sa[42] = -0.0016743903f;
      sa[43] = 0.0058285734f;
      sa[44] = 0.0136328805f;
      sa[45] = 0.05984365f;
      sa[46] = 0.7306959f;
      sa[47] = 0.0040140655f;
      sa[48] = -5.484074E-5f;
      sa[49] = -3.5963407E-5f;
      sa[50] = -3.7327918E-5f;
      sa[51] = -4.3897155E-5f;
      sa[52] = -2.2667482E-5f;
      sa[53] = 9.7559234E-5f;
      sa[54] = -1.3719982E-6f;
      sa[55] = 1.9782128E-5f;
      sa[56] = 1.3707686E-6f;
      sa[57] = -6.255745E-5f;
      sa[58] = -4.7041714E-5f;
      sa[59] = -1.7307742E-5f;
      sa[60] = -0.0797507f;
      sa[61] = -0.0020224096f;
      sa[62] = -0.67548203f;
      sa[63] = 0.072055146f;
      sa[64] = 3.743712E-4f;
      sa[65] = 0.034344953f;
      sa[66] = 0.27156636f;
      sa[67] = 0.4737168f;
      sa[68] = 0.16122614f;
      sa[69] = -0.0042622536f;
      sa[70] = -0.0250392f;
      sa[71] = -0.2855781f;
      sa[72] = -0.2917802f;
      sa[73] = 0.04995064f;
      sa[74] = -0.1544997f;
      sa[75] = 0.06649479f;
      sa[76] = 0.0011158708f;
      sa[77] = 0.04298499f;
      sa[78] = 0.12837194f;
      sa[79] = -0.12510285f;
      sa[80] = -0.098369114f;
      sa[81] = 0.02832092f;
      sa[82] = 1.655996E-4f;
      sa[83] = -0.8661767f;
      sa[84] = 7.841481E-5f;
      sa[85] = -1.8045343E-5f;
      sa[86] = 2.8552735E-5f;
      sa[87] = 1.8653795E-5f;
      sa[88] = 2.817162E-5f;
      sa[89] = -4.7677167E-6f;
      sa[90] = -7.606841E-5f;
      sa[91] = 9.12648E-5f;
      sa[92] = -6.18814E-5f;
      sa[93] = 7.2933915E-5f;
      sa[94] = -4.710514E-5f;
      sa[95] = -4.6169604E-5f;
      sa[96] = -0.0044343676f;
      sa[97] = -9.984492E-5f;
      sa[98] = 0.1412334f;
      sa[99] = 2.0552531E-4f;
      sa[100] = 0.0026485564f;
      sa[101] = 6.1208935E-4f;
      sa[102] = -0.0061820485f;
      sa[103] = 0.53916264f;
      sa[104] = -4.0680406E-4f;
      sa[105] = -0.0014875942f;
      sa[106] = 4.630639E-4f;
      sa[107] = -2.3461458E-4f;
      sa[108] = 0.13193661f;
      sa[109] = 0.035868417f;
      sa[110] = 0.107184954f;
      sa[111] = -0.3672231f;
      sa[112] = -0.0011955368f;
      sa[113] = -0.061897714f;
      sa[114] = -0.5208514f;
      sa[115] = -0.06117527f;
      sa[116] = -0.18387204f;
      sa[117] = -0.19721198f;
      sa[118] = 0.0013834283f;
      sa[119] = 0.051255792f;
      sa[120] = 6.691614E-5f;
      sa[121] = 9.403558E-5f;
      sa[122] = -9.2554226E-5f;
      sa[123] = 9.0791924E-5f;
      sa[124] = -2.6989008E-5f;
      sa[125] = -1.4646743E-5f;
      sa[126] = 4.0007886E-5f;
      sa[127] = 5.32033E-5f;
      sa[128] = -1.6681908E-5f;
      sa[129] = 3.6759637E-5f;
      sa[130] = -2.450397E-7f;
      sa[131] = -9.669392E-5f;
      sa[132] = 0.23223107f;
      sa[133] = 0.0010896791f;
      sa[134] = -0.0334805f;
      sa[135] = 0.059117816f;
      sa[136] = 0.029801622f;
      sa[137] = -0.0031866606f;
      sa[138] = 0.0020409145f;
      sa[139] = -0.0028632998f;
      sa[140] = -0.10674017f;
      sa[141] = -0.0027260382f;
      sa[142] = 0.18781784f;
      sa[143] = 0.43149304f;
    }
  }
}
// Neuron weights connecting Tanh and Tanh layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[48];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_2_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.5700028f;
      sa[1] = 0.7618723f;
      sa[2] = 0.5078071f;
      sa[3] = 0.4685059f;
      sa[4] = 2.2644534E-5f;
      sa[5] = 0.3447754f;
      sa[6] = -1.1699986f;
      sa[7] = -6.3715634E-6f;
      sa[8] = 0.4577446f;
      sa[9] = -0.7691294f;
      sa[10] = 8.803161E-5f;
      sa[11] = 0.64103454f;
      sa[12] = -6.95297E-5f;
      sa[13] = -3.8061844E-6f;
      sa[14] = 5.6496858E-5f;
      sa[15] = 7.099479E-5f;
      sa[16] = 4.88409E-5f;
      sa[17] = -5.7764533E-5f;
      sa[18] = 9.694073E-5f;
      sa[19] = 4.889141E-5f;
      sa[20] = 7.535878E-5f;
      sa[21] = 7.920404E-5f;
      sa[22] = -4.892834E-5f;
      sa[23] = 6.154667E-6f;
      sa[24] = -0.026667114f;
      sa[25] = -0.29245225f;
      sa[26] = -0.50267196f;
      sa[27] = 0.0031912823f;
      sa[28] = 3.516508E-5f;
      sa[29] = -0.38326204f;
      sa[30] = 0.15340705f;
      sa[31] = -7.830949E-5f;
      sa[32] = 0.013532774f;
      sa[33] = -0.12934104f;
      sa[34] = -4.7530557E-5f;
      sa[35] = -0.12217767f;
      sa[36] = 6.371875E-5f;
      sa[37] = -3.382549E-6f;
      sa[38] = -1.125312E-5f;
      sa[39] = -7.154791E-6f;
      sa[40] = -4.8858048E-5f;
      sa[41] = -4.7614143E-5f;
      sa[42] = 5.9542814E-5f;
      sa[43] = 4.8821348E-5f;
      sa[44] = -1.7685044E-5f;
      sa[45] = 8.5693246E-5f;
      sa[46] = -4.887965E-5f;
      sa[47] = 6.0060018E-5f;
    }
  }
}
// Neuron weights connecting Tanh and Linear layer
class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[4];
  static {
    deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_3_0.fill(VALUES);
  }
  static final class deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -1.7024833f;
      sa[1] = -2.8937204E-5f;
      sa[2] = 0.90967786f;
      sa[3] = -1.2731834E-6f;
    }
  }
}
// The class representing training column names
class NamesHolder_deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9 implements java.io.Serializable {
  public static final String[] VALUES = new String[12];
  static {
    NamesHolder_deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_0.fill(VALUES);
  }
  static final class NamesHolder_deeplearning_614ea374_1d93_48f8_b844_60a6eba734e9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "SiO2";
      sa[1] = "TiO2";
      sa[2] = "Al2O3";
      sa[3] = "FeOt";
      sa[4] = "MnO";
      sa[5] = "MgO";
      sa[6] = "CaO";
      sa[7] = "Na2O";
      sa[8] = "K2O";
      sa[9] = "P2O5";
      sa[10] = "H2O";
      sa[11] = "T (K)";
    }
  }
}

